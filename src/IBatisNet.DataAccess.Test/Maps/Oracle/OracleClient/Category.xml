<?xml version="1.0" encoding="utf-8"?>
<sqlMap namespace="Category" 
xmlns="http://ibatis.apache.org/mapping" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
	
	<alias>
		<typeAlias alias="Category" type="IBatisNet.DataAccess.Test.Domain.Category, IBatisNet.DataAccess.Test"/>
	</alias>
	
	<statements>
	
		<select id="GetCategory" parameterClass="int" resultClass="Category">
			select
			Category_ID as Id,
			Category_Name as Name,
			Category_Guid as GuidString
			from Categories  
			where Category_ID = #value# 
		</select>
		
		<!--
		If using <statement> instead of <insert>
		Throws Exception upon returning the generated key (null object)
		since Oracle requires the selectKey to return 
		the new Id but <statement>s do not have a selectKey unlike <insert>s
		-->
		<insert id="InsertCategory" parameterClass="Category" resultClass="int">
			<selectKey property="Id" type="pre" resultClass="int">
				select s_categories.nextval as value from dual
            </selectKey>		
			insert into Categories  
				(Category_Id, Category_Name, Category_Guid) 
			values 
				(#Id#, #Name#, #GuidString:VarChar#)
		</insert>
		
		<!--  -->
		<insert id="InsertCategoryViaInsertStatement" parameterClass="Category" >
			<selectKey property="Id" type="pre" resultClass="int">
				select s_categories.nextval as value from dual
            </selectKey>		
            insert into Categories  
				(Category_Id, Category_Name, Category_Guid) 
			values 
				(#Id#, #Name#, #GuidString:VarChar#)
		</insert>
		
		<insert id="InsertCategoryViaParameterMap" parameterMap="InsertParam">
			<selectKey property="Id" type="pre" resultClass="int">
				select s_categories.nextval as value from dual
            </selectKey>	
			insert into Categories  
				(Category_Id, Category_Name, Category_Guid)
			values 
				(?,?,?)
		</insert>

		<insert id="InsertCategoryNull" parameterMap="insert-null-params">
			<selectKey property="Id" type="pre" resultClass="int">
				select s_categories.nextval as value from dual
            </selectKey>	
			insert into Categories  
				(Category_Id, Category_Name, Category_Guid)
			values 
				(?,?,?)
		</insert>
		
		<!--
		Oracle.StatementTest.TestUpdateCategoryWithExtendParameterMap()
		Throws OracleException Invalid number
		
		Parameter order is not correct in CommandText:
		"update Categories set     Category_Name =  :Id,     Category_Guid =  :Name     where     Category_Id =  :GuidString"
		
		OracleClient provider works better using an extended parameter map 
		on insert instead of update since the order of the properties is important
		(see UpdateCategoryGenerate for related issue).
		
		WorkAround:
		Use a specific parameterMap for the UPDATE
		or use a parameterClass instead of an extended parameterMap
		-->
		<update id="UpdateCategoryViaParameterMap" parameterMap="UpdateParam">
			update Categories set
			Category_Name = ?,
			Category_Guid = ?
			where
			Category_Id = ?
		</update>

		<!--
		NOTE: Use parameterMap CLR "type" attribute to define OUT parameter
		-->
		<procedure id="InsertCategoryViaStoreProcedure" parameterMap="insert-params">
			prc_InsertCategory
		</procedure>
		
		<insert id="InsertCategoryGenerate" parameterMap="insert-generate-params">
			<selectKey property="Id" type="post" resultClass="int">
				select s_categories.nextval as value from dual
            </selectKey>
            <generate table="Categories" />
		</insert>
		
		<!--
		Throws OracleException SQL command not properly ended
		Since OracleClient properties list is coming back in a different order from MSSQL/MySql
		
		For example, if the SqlGenerator Update method is fixed to something like the following
		that does not rely on the column order:
		
			int setColumnCount = 0;
			// Create the set statement
			for (int i = 0; i < columnCount; i++) 
			{
				ParameterProperty property = (ParameterProperty) statement.ParameterMap.PropertiesList[i];
						
				// Ignore key columns
				if (update.Generate.By.IndexOf(property.ColumnName) < 0) 
				{
					if (setColumnCount > 1) {
						output.Append(",");
					}
					output.Append("\t" + property.ColumnName + " = ?");
				}

				++setColumnCount;
			}		
		 
		Then the actual update statement is still messed up because of the different order when
		applying the parameter map!:
		
		UPDATE \tCategories SET \tCategory_Name =  :Id,\tCategory_Guid =  :Name WHERE \t Category_Id =  :GuidString
		-->		
		<update id="UpdateCategoryGenerate" parameterMap="update-generate-params">
			<generate table="Categories" by="Category_Id"/>
		</update>
		
		<delete id="DeleteCategoryGenerate" parameterMap="delete-generate-params">
			<generate table="Categories" by="Category_Id, Category_Name"/>
		</delete>
		
		<!--
		Throws OracleException illegal variable name/number
		
		See UpdateCategoryGenerate for the properties list order issue
		-->
		<select id="SelectByPKCategoryGenerate" resultClass="Category" parameterClass="Category" parameterMap="select-generate-params">
			<generate table="Categories" by="Category_Id"/> 
		</select>
		
		<select id="SelectAllCategoryGenerate" resultClass="Category" parameterMap="select-generate-params">
			<generate table="Categories" /> 
		</select>
		
		<statement id="DynamicGuid" 
			resultClass="Category" 
			parameterClass="Category">
			select
			Category_ID as Id,
			Category_Name as Name,
			Category_Guid as GuidString
			from Categories  
			<dynamic prepend="where">
				<isNotEqual prepend="and" property="Guid" compareProperty="EmptyGuid">
					Category_Guid=#GuidString:VarChar#
				</isNotEqual>
			</dynamic>
		</statement>
	</statements>
	
	<parameterMaps>
		<parameterMap id="insert-params">
			<parameter property="Name" column="p_Category_Name"/>
			<parameter property="GuidString" column="p_Category_Guid" dbType="VarChar"/>
			<parameter property="Id" column="p_Category_Id" dbType="Int32" type="Int"/>
		</parameterMap>
		
		<parameterMap id="InsertParam">
			<parameter property="Id"   column="Category_Id" dbType="Int32" />
			<parameter property="Name" column="Category_Name"/>
			<parameter property="GuidString" column="Category_Guid" dbType="VarChar"/>
		</parameterMap>
		
		<parameterMap id="insert-null-params">
			<parameter property="Id"   column="Category_Id" dbType="Int32" />
			<parameter property="Name" column="Category_Name"/>
			<parameter property="GuidString" column="Category_Guid" nullValue="00000000-0000-0000-0000-000000000000" dbType="VarChar"/>
		</parameterMap>
		
		<parameterMap id="UpdateParam" extends="InsertParam">
			<parameter property="Id" column="Category_Id" dbType="Int32"/>
		</parameterMap>
		
		<!-- Used by generated statement -->
		
		<parameterMap id="insert-generate-params">
			<parameter property="Id"   column="Category_Id" dbType="Int32" />		
			<parameter property="Name" column="Category_Name"/>
			<parameter property="GuidString" column="Category_Guid" dbType="VarChar"/>
		</parameterMap>
		
		<parameterMap id="update-generate-params" extends="insert-generate-params">
			<parameter property="Id" column="Category_Id" dbType="Int32"/>
		</parameterMap>
		
		<parameterMap id="delete-generate-params">
			<parameter property="Id" column="Category_Id" dbType="Int32"/>
			<parameter property="Name" column="Category_Name"/>
		</parameterMap>
		
		<parameterMap id="select-generate-params">
			<parameter property="Id" column="Category_Id" dbType="Int32"/>
			<parameter property="Name" column="Category_Name"/>
			<parameter property="GuidString" column="Category_Guid" dbType="VarChar"/>
		</parameterMap>
		
	</parameterMaps>
	
</sqlMap>
