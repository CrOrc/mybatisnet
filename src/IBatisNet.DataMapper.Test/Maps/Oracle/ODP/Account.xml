<?xml version="1.0" encoding="UTF-8" ?>

<sqlMap namespace="Account" xmlns="http://ibatis.apache.org/mapping" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >

	<!-- =============================================                
                <resultMap 
					name="name"  
					class="name"
					extend="resultMapId" 
				>
				<result 
					property="name" 
					column="name" 
					columnIndex="name" 
					nullValue="value"
					select="name"
					resultMap="name"
					lazyLoad="true/false"
					dbType=""
				/>
				<procedure 
					name="name" 
					parameterMap="name"
				>
				<statement 
						name="name"
						parameterClass="name"
						parameterMap="name"
						resultClass="name"
						resultMap="name"
						listClass="name"
				>
				<parameterMap 
						name="name" 
						class=""
				>
				<parameter 
						property="name" 
						dbType="" 
						output="true/false" 
						type=""
						nullValue=""
						extend="parameterMapId"
				/>

       ============================================= -->
       
    <cacheModels>
		
		<cacheModel id="account-cache" implementation="MEMORY" >
			<flushInterval hours="24"/>
			<flushOnExecute  statement="UpdateAccountViaInlineParameters"/>
			<flushOnExecute  statement="UpdateAccountViaParameterMap"/>
			<property name="Type" value="Weak"/>
		</cacheModel>
		
		<cacheModel id="rw-account-cache" implementation="FIFO" serialize="true" readOnly="false">
			<flushInterval hours="24"/>
			<flushOnExecute statement="UpdateAccountViaInlineParameters"/>
		</cacheModel>
		
    </cacheModels>
    
	<alias>
		<typeAlias alias="HundredsBool" type="IBatisNet.DataMapper.Test.Domain.HundredsTypeHandlerCallback, IBatisNet.DataMapper.Test"/>
	</alias>         
       
	<resultMaps>                                    
		<resultMap id="account-result"  class="Account" >
			<result property="Id"           column="Account_ID"/>
			<result property="FirstName"    column="Account_FirstName"/>
			<result property="LastName"     column="Account_LastName"/>
			<result property="EmailAddress" column="Account_Email" nullValue="no_email@provided.com"/>
			<result property="BannerOption" column="Account_Banner_Option" dbType="Varchar2" type="bool"/>
			<result property="CartOption"	column="Account_Cart_Option" typeHandler="HundredsBool"/>						
		</resultMap>
		<resultMap id="indexed-account-result" class="Account">
			<result property="Id"           column="Account_ID"			columnIndex="0"/>
			<result property="FirstName"    column="Account_FirstName"	columnIndex="1"/>
			<result property="LastName"     column="Account_LastName"	columnIndex="2"/>
			<result property="EmailAddress" column="Account_Email"		columnIndex="3"	nullValue="no_email@provided.com"/>
		</resultMap>
		<resultMap id="account-result-nullable-email" class="Account">
			<result property="Id"           column="Account_ID"/>
			<result property="FirstName"    column="Account_FirstName"/>
			<result property="LastName"     column="Account_LastName"/>
			<result property="EmailAddress" column="Account_Email"/>
		</resultMap>
		
		<resultMap id="email-result" class="string">
			<result property="value" column="Account_Email"/>
		</resultMap>
		
		<resultMap id="account-hashtable-result" class="Hashtable">
			<result property="Id"           type="Int"		column="Account_ID" />
			<result property="FirstName"    type="string"	column="Account_FirstName"/>
			<result property="LastName"     type="string"	column="Account_LastName"/>
			<result property="EmailAddress" type="string"	column="Account_Email"/>
		</resultMap>
		
	</resultMaps>
	
	<!-- =============================================
        MAPPED STATEMENTS - w/Inline Parameters
    ============================================= 
    -->
	<statements>
	
		<select id="GetAllAccountsCache" 
			resultMap="account-result"
			cacheModel="account-cache">
			select * from Accounts
			order by Account_ID
		</select>
			
		<select id="GetAllAccountsAsArrayListViaResultClass"
						resultClass="ArrayList">
			select
			Account_ID as Id,
			Account_FirstName as FirstName,
			Account_LastName as LastName,
			Account_Email as EmailAddress
			from Accounts
			order by Account_ID
		</select>
			
		<!--
		NOTE: Should NOT be a dynamic prepend test for Oracle since the rownum has to be
		part of the where clause.  Best suited for MSSQL using TOP keyword in SELECT.
		-->
		<select id="GetAccountsDynamic" resultMap="account-result" parameterClass="Hashtable" >
			select * from Accounts
			<dynamic prepend="where">
				<isParameterPresent>
				<isNotEmpty prepend="and" property="FirstName" >
						Account_FirstName LIKE '%$FirstName$%'
				</isNotEmpty>
				<isNotEmpty prepend="and" property="LastName" >
						Account_LastName LIKE '%$LastName$%'
				</isNotEmpty>
				<isNotEmpty prepend="and" property="EmailAddress"  >
						Account_Email LIKE '%$EmailAddress$%'
				</isNotEmpty>
				</isParameterPresent>
			</dynamic>
			<![CDATA[
			and rownum <= $MaximumAllowed$ 
			order by Account_LastName			
			]]>			
		</select>

		<select id="GetCachedAccountsViaResultMap"
					resultMap="account-result"
					cacheModel="account-cache" >
			select *
			from Accounts
			order by Account_ID
		</select>

		<select id="GetRWCachedAccountsViaResultMap"
				resultMap="account-result"
				cacheModel="rw-account-cache" extends="GetCachedAccountsViaResultMap">
		</select>
				
  		<select id="GetNoAccountWithCache"
						parameterClass="Integer"
						resultMap="account-hashtable-result"
						cacheModel="account-cache">
			select *
			from Accounts
			where Account_ID = #value#
		</select>  
  
		<select id="SelectWithProperty"
					resultMap="account-result">
			select *
			from Accounts
			where Account_FirstName = ${accountName}
		</select>		
  
		<select id="GetAccountAsHashtable"
						parameterClass="Integer"
						resultMap="account-hashtable-result">
			select *
			from Accounts
			where Account_ID = #value#
		</select>
  
		<select id="GetAllAccountsAsHashMapViaResultMap"
						resultMap="account-hashtable-result">
			select *
			from Accounts
			order by Account_ID
		</select>
  
  		<!-- 
		StatementTest.TestExecuteQueryForObjectAsHashtableResultClass()
		Throws exception due to provider returning Hashtable keys in all CAPS such as ["ID"]
		while test does assert looking for ["Id"] in the returned Hashtable:
		Assert.AreEqual(1, (int)account["Id"], "account.Id");
		
		Workaround:
		See JIRA-14 for related note.  Store Hashtable keys in all CAPS and use all CAPS
		for comparison if using OracleClient provider.
		-->
		<select id="GetAccountAsHashtableResultClass"
						parameterClass="int"
						resultClass="HashMap">
			select
			Account_ID as Id,
			Account_FirstName as FirstName,
			Account_LastName as LastName,
			Account_Email as EmailAddress
			from Accounts
			where Account_ID = #value#
		</select>
  
		<select id="GetAllAccountsAsHashtableViaResultClass"
						resultClass="Hashtable">
			select
			Account_ID as Id,
			Account_FirstName as FirstName,
			Account_LastName as LastName,
			Account_Email as EmailAddress
			from Accounts
			order by Account_ID
		</select>
    
		<select id="GetAccountViaColumnName"
				parameterClass="int"
				resultMap="account-result">
			select
			Account_ID,
			Account_FirstName,
			Account_LastName,
			Account_Email,
			Account_Banner_Option,
			Account_Cart_Option			
			from Accounts
			where Account_ID = #value:Int32#
		</select>
		
		<select id="GetAccountViaColumnIndex"
				parameterClass="int"
				resultMap="indexed-account-result">
			select
			Account_ID,
			Account_FirstName,
			Account_LastName,
			Account_Email
			from Accounts
			where Account_ID = #value:Int32#
		</select>
  
		<select id="GetAllAccountsViaResultMap"
					resultMap="account-result">
			select * from Accounts
			order by Account_ID
		</select>
				
		<select id="GetAllAccountsViaResultClass" 
			resultClass="Account">
			select
			Account_ID as Id,
			Account_FirstName as FirstName,
			Account_LastName as LastName,
			Account_Email as EmailAddress
			from Accounts
			order by Account_ID
		</select>
		
		<select id="GetFewAccountsViaResultMap"
			resultMap="account-result">
			<![CDATA[
			select * from Accounts
			where Account_ID < 2
			order by Account_ID
			]]>
		</select>
  
		<select id="GetNoAccountsViaResultMap"
					resultMap="account-result">
			select * from Accounts
			where Account_ID > 1000
			order by Account_ID
		</select>

  
		<select id="GetAccountNullableEmail" 
			resultMap="account-result-nullable-email">
			select
			Account_ID,
			Account_FirstName,
			Account_LastName,
			Account_Email
			from Accounts
			where Account_ID = #value:Int32#
		</select>
  
		<select id="GetAccountViaResultClass" 
			resultClass="Account">
			<![CDATA[
					select
					Account_ID as Id,
					Account_FirstName as FirstName,
					Account_LastName as LastName,
					Account_Email as EmailAddress
					from Accounts
					where Account_ID = #value:Int32#
			]]>
		</select>
		
		<select id="GetAccountViaInlineParameters"
				resultMap="indexed-account-result"
				parameterClass="Account">
			select
			Account_ID,
			Account_FirstName,
			Account_LastName,
			Account_Email
			from Accounts
			where Account_ID = #Id:Int32#
		</select>
		
		 <select id="GetEmailAddressViaResultClass" resultClass="string">
			select Account_Email as value
			from Accounts
			where Account_ID = #value:Int32#
		</select>
 
		<select id="GetEmailAddressViaResultMap"
						parameterClass="int"
						resultMap="email-result">
			select Account_Email
			from Accounts
			where Account_ID = #value:Int32#
		</select>

		<select id="GetAllEmailAddressesViaResultClass"
							resultClass="string">
			select Account_Email
			from Accounts
			order by Account_ID
		</select>
		
		 <select id="GetAllEmailAddressesViaResultMap"
                    resultMap="email-result">
			select Account_Email
			from Accounts
			order by Account_ID
		</select>
					
		 <insert id="InsertAccountViaParameterMap"
                    parameterMap="insert-params">
			insert into Accounts  
				(Account_ID, Account_FirstName, Account_LastName, Account_Email, Account_Banner_Option, Account_Cart_Option) 
			values 
				(?, ?, ?, ?, ?, ?)
		</insert>
		
		 <update id="UpdateAccountViaParameterMap"
                    parameterMap="update-params">
			update Accounts set
			Account_FirstName = ?,
			Account_LastName = ?,
			Account_Email = ?
			where
			Account_ID = ?
		</update>
		
		<update id="UpdateAccountViaParameterMap2"
                    parameterMap="update-params2">
			update Accounts set
			Account_ID = ?,
			Account_FirstName = ?,
			Account_LastName = ?,
			Account_Email = ?
			where
			Account_ID = ?
		</update>
				
		<delete id="DeleteAccountViaInlineParameters">
			delete from Accounts 
			where
			Account_ID = #Id#
		</delete>
		
		<select id="GetAccountComplexMapping"
					resultMap="indexed-account-result"
                    parameterClass="Hashtable">
			select *
			from Accounts 
			where 
			Account_FirstName = #Account.FirstName#
			And Account_LastName = #Order.City#
		</select>
		
		<select id="GetDynamicOrderedEmailAddressesViaResultMap"
                    resultMap="email-result">
			select Account_Email
			from Accounts
			order by $value$
		</select>
		
		<!-- Dynamic statements -->
		<select id="GetAllAccountsViaResultMapWithDynamicElement"
				resultMap="account-result">
			select * from Accounts
			where Account_Email $value$ '%@%'
			order by Account_ID
		</select>
		
		
		<!--
		IBatisNet.Test.NUnit.SqlMapTests.StatementTest.TestSimpleDynamicSubstitution : 
		Oracle.DataAccess.Client.OracleException : ORA-00904: "ID": invalid identifier
		
		at Oracle.DataAccess.Client.OracleException.HandleErrorHelper(Int32 errCode, OracleConnection conn, IntPtr opsErrCtx, OpoSqlValCtx* pOpoSqlValCtx, Object src, String procedure)
		at Oracle.DataAccess.Client.OracleException.HandleError(Int32 errCode, OracleConnection conn, String procedure, IntPtr opsErrCtx, OpoSqlValCtx* pOpoSqlValCtx, Object src)
		at Oracle.DataAccess.Client.OracleCommand.ExecuteReader(Boolean requery, Boolean fillRequest, CommandBehavior behavior)
		at Oracle.DataAccess.Client.OracleCommand.System.Data.IDbCommand.ExecuteReader()
		at IBatisNet.DataMapper.MappedStatements.MappedStatement.RunQueryForList(RequestScope request, IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults, RowDelegate rowDelegate) in c:\projects\ibatis\svn\source\ibatisnet.datamapper\mappedstatements\mappedstatement.cs:line 689
		at IBatisNet.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject, Int32 skipResults, Int32 maxResults) in c:\projects\ibatis\svn\source\ibatisnet.datamapper\mappedstatements\mappedstatement.cs:line 626
		at IBatisNet.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForList(IDalSession session, Object parameterObject) in c:\projects\ibatis\svn\source\ibatisnet.datamapper\mappedstatements\mappedstatement.cs:line 607
		at IBatisNet.DataMapper.SqlMapper.QueryForList(String statementName, Object parameterObject) in c:\projects\ibatis\svn\source\ibatisnet.datamapper\sqlmapper.cs:line 600
		at IBatisNet.Test.NUnit.SqlMapTests.StatementTest.TestSimpleDynamicSubstitution() in c:\projects\ibatis\svn\source\ibatisnet.test\nunit\sqlmaptests\statementtest.cs:line 216		

		Statement does not have parameterPrefix:
		select    
				Account_ID          as Id,    
				Account_FirstName   as FirstName,    
				Account_LastName    as LastName,    
				Account_Email       as EmailAddress  
		from Accounts  
		WHERE Account_ID = id
		
		DynamicSubst statement works since $statement$ is in <dynamic> element and
		gets parsed
		-->
		<select id="SimpleDynamicSubstitution"
             parameterClass="Hashtable"
             resultClass="Account">
			$statement$
		</select>
		
		<!-- Public Fields -->
		<insert id="InsertAccountViaPublicFields">
			insert into Accounts 
				(Account_ID, Account_FirstName, Account_LastName, Account_Email) 
			values 
				(#Id#, #FirstName#, #LastName#, #EmailAddress#)
		</insert>
		
		<!-- Inline Parameters -->
		<update id="UpdateAccountViaInlineParameters"
			parameterMap="update-params">
			update Accounts set
			Account_FirstName = ?,
			Account_LastName = ?,
			Account_Email = ?
			where
			Account_ID = ?
		</update>

		<insert id="InsertAccountViaInlineParameters"
			parameterClass="Account" >
			insert into Accounts 
				(Account_ID, Account_FirstName, Account_LastName, Account_Email) 
			values 
				(#Id#, #FirstName#, #LastName#, #EmailAddress:Varchar2:no_email@provided.com#
			)
		</insert>

		<insert id="InsertAccountNullableEmail"
			parameterClass="Account" >
			insert into Accounts 
				(Account_ID, Account_FirstName, Account_LastName, Account_Email) 
			values 
				( #Id#, #FirstName#, #LastName#, #EmailAddress# )
		</insert>

		<insert id="InsertAccountUknownParameterClass">
			insert into Accounts 
				(Account_ID, Account_FirstName, Account_LastName, Account_Email) 
			values 
				( #Id#, #FirstName#, #LastName#, #EmailAddress# )
		</insert>
  
		<delete id="DeleteAccount"
			parameterClass="Account">
			delete from Accounts
			where Account_ID = #Id#
		</delete>
		
		<!-- Extends statement -->
		<select id="GetAllAccounts"
					resultMap="indexed-account-result">
			select
			Account_ID,
			Account_FirstName,
			Account_LastName,
			Account_Email
			from Accounts
		</select>
		
		<select id="GetAllAccountsOrderByName"
			extends="GetAllAccounts"
			resultMap="indexed-account-result">
			order by Account_FirstName
		</select>
		
		<select id="GetOneAccount"
			extends="GetAllAccounts"
			resultMap="indexed-account-result">
			where Account_ID = #value#
		</select>
		
		<select id="GetSomeAccount"
			extends="GetAllAccounts"
			parameterClass="Hashtable"
			resultMap="indexed-account-result">
			where Account_ID between #lowID# and #hightID#
		</select>
		
		<select id="SelectAccountJIRA29" parameterClass="map" resultClass="Account">
			select
				Account_ID as Id,
				Account_FirstName as FirstName,
				Account_LastName as LastName,
				Account_Email as EmailAddress
			from Accounts
			where Account_FirstName = '##$AccountName$##'
		</select>	
			
		<select id="SelectAccountJIRA29-2"
				parameterClass="Hashtable"
				resultClass="Account">
			select
				Account_ID as Id,
				Account_FirstName as FirstName,
				Account_LastName as LastName,
				Account_Email as EmailAddress
			from Accounts
			where 1=1
			<isNotEmpty prepend="AND" property="Foo"> 
				(Account_FirstName = '##$Foo$##') 
			</isNotEmpty> 
		</select>			
		
		<!--
		Using positional parameters with a parameterClass or parameterMap
		-->
		<select id="GetAccountWithRepeatingProperty"
						parameterClass="Account" 
						resultMap="indexed-account-result">
			select
					Account_ID,
					Account_FirstName,
					Account_LastName,
					Account_Email
			from Accounts
			where Account_ID = #Id# and 
					Account_ID = #Id# and 
					Account_FirstName = #FirstName# and 
					Account_LastName = #LastName# and 
					Account_ID = #Id#				
		</select>
		<!--
		<select id="GetAccountWithRepeatingProperty"
						parameterMap="account-repeat-param" 
						resultMap="account-result">
			select
					Account_ID,
					Account_FirstName,
					Account_LastName,
					Account_Email
			from Accounts
			where Account_ID = ? and 
					Account_ID = ? and 
					Account_FirstName = ? and 
					Account_LastName = ? and 
					Account_ID = ?				
		</select>
		-->
		
		<select id="GetAllAccountsViaCustomTypeHandler"
			resultMap="account-result">
			select * from Accounts
			order by Account_ID
		</select>					
				
		<!-- JIRA-110 -->
		<select id="GetManyAccound" resultClass="Account">
			<![CDATA[
			SELECT 
				Account_ID as Id,
				Account_FirstName as FirstName,
				Account_LastName as LastName,
				Account_Email as EmailAddress
			FROM Accounts 
			]]>
		</select>
		
		<select id="Get1Account" extends="GetManyAccound" resultClass="Account">WHERE Account_ID=1</select>
		
		<statement id="GetAccounts" resultMap="account-result"> 
			<![CDATA[SELECT * ]]> 
			<![CDATA[FROM ]]> 
			Accounts 
		</statement> 
		<!-- JIRA-110 -->

		<insert id="InsertAccountDynamic" parameterClass="Account">
			INSERT INTO Accounts
			(Account_ID, Account_FirstName, Account_LastName, Account_Email)
			VALUES(#Id#, #FirstName#, #LastName#
			<dynamic prepend=",">
				<isNotNull prepend="," property="EmailAddress">
					#EmailAddress#
				</isNotNull>
				<isNull prepend="," property="EmailAddress">
						null
				</isNull>
			</dynamic>
			)
        </insert>
        						
		<!-- For procedure, the parameters of the parameterMap must in the same order 
		as for the procedure paramaters-->
		<!--
		<statement id="InsertAccountViaStoreProcedure" parameterMap="insert-params">
			call prc_InsertAccount(?, ?, ?, ?)
		</statement>
		-->
		<procedure id="InsertAccountViaStoreProcedure" parameterMap="insert-params">
			prc_InsertAccount
		</procedure>
		
		<!--
		<statement id="SwapEmailAddresses" parameterMap="swap-params">
			call prc_Swap_Email_Address(?, ?)
		</statement>
		-->
		<procedure id="SwapEmailAddresses" parameterMap="swap-params">
			prc_Swap_Email_Address
		</procedure>

		<procedure id="GetAllAccountsViaStoredProcRefCursor" 
			parameterMap="stored-proc-refcursor-param"
			resultClass="Account">
			REF_CURSOR_TEST.GET_ACCOUNTS_PROCEDURE
		</procedure>

		<procedure id="GetAccountViaStoredProcRefCursor" 
			parameterMap="stored-proc-refcursor-param-with-input"
			resultClass="Account">
			REF_CURSOR_TEST.GET_ACCOUNT_PROCEDURE
		</procedure>

	</statements>

	<!-- =============================================
            OPTIONAL EXPLICIT PARAMETER MAP
    ============================================= -->
	<parameterMaps>   
	
		<parameterMap id="stored-proc-refcursor-param" class="Hashtable">
			<!--
			<parameter direction="Output" column="P_ACCOUNTS" dbType="RefCursor"/>
			-->
			<parameter property="P_ACCOUNTS" direction="Output" column="P_ACCOUNTS" dbType="RefCursor"/>
		</parameterMap>	

		<parameterMap id="stored-proc-refcursor-param-with-input" class="Hashtable">
			<parameter property="P_ACCOUNTS" direction="Output" column="P_ACCOUNTS" dbType="RefCursor"/>
			<parameter property="P_ACCOUNT_ID" direction="Input" column="P_ACCOUNT_ID" dbType="Int32"/>
		</parameterMap>			

		<parameterMap id="swap-params" class="Hashtable">
			<parameter property="email1" column="p_First" direction="InputOutput" dbType="Varchar2" size="64"/>
			<parameter property="email2" column="p_Second" direction="InputOutput" dbType="Varchar2" size="64"/>
		</parameterMap>
		
		<parameterMap id="insert-params" class="Account">
			<parameter property="Id"/>
			<parameter property="FirstName" dbType="Varchar2" size="32"/>
			<parameter property="LastName" dbType="Varchar2" size="32"/>			
			<parameter property="EmailAddress" dbType="Varchar2" size="128" nullValue="no_email@provided.com"/>
			<parameter property="BannerOption"  dbType="Varchar2" type="bool"/>
			<parameter property="CartOption"	column="Account_Cart_Option" typeHandler="HundredsBool"/>			
		</parameterMap>
		
		<parameterMap id="update-params" class="Account">
			<parameter property="FirstName" dbType="Varchar2" size="32"/>
			<parameter property="LastName" dbType="Varchar2" size="32"/>			
			<parameter property="EmailAddress" dbType="Varchar2" size="128" nullValue="no_email@provided.com"/>
			<parameter property="Id" dbType="Int32"/>
		</parameterMap>
		
		<parameterMap id="update-params2" class="Account">
			<parameter property="Id" dbType="Int32"/>
			<parameter property="FirstName" dbType="Varchar2" size="32" />
			<parameter property="LastName" dbType="Varchar2" size="32" />			
			<parameter property="EmailAddress" dbType="Varchar2" size="128" nullValue="no_email@provided.com"/>
			<parameter property="Id" dbType="Int32"/>
		</parameterMap>
		
		<parameterMap id="account-repeat-param" class="Account">
			<parameter property="Id" dbType="Int32"/>
			<parameter property="Id" dbType="Int32"/>
			<parameter property="FirstName" dbType="Varchar2" size="32"/>
			<parameter property="LastName" dbType="Varchar2" size="32"/>			
			<parameter property="Id" dbType="Int32"/>
		</parameterMap>		
		
	</parameterMaps>
	
</sqlMap>
